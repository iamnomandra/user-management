 @app.put("/items/{item_id}", response_model=Item)
   async def update_item(item_id: str, item: Item):
       """Update an existing item"""
       item_dict = item.dict()
       result = await db.items.replace_one({"_id": item_id}, item_dict)
       if result.modified_count > 0:
           item_dict["_id"] = item_id
           return item_dict
       raise HTTPException(status_code=404, detail="Item not found")

   @app.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
   async def delete_item(item_id: str):
       """Delete an item"""
       result = await db.items.delete_one({"_id": item_id})
       if result.deleted_count == 0:
           raise HTTPException(status_code=404, detail="Item not found")

''''''''''''''''''''''''''
@app.get("/")
async def read_root():
    async with httpx.AsyncClient() as client:
        response = await client.get('https://api.example.com/data')
        return {"data": response.json()}  
''''''''''''''
# R <=== Read
# Read all users
@app.get("/api/v1/read-all-users", response_model=List[User])
async def read_users():
    users = await app.mongodb["users"].find().to_list(None)
    return users

# Read one user by email_address
@app.get("/api/v1/read-user/{email_address}", response_model=User)
async def read_user_by_email(email_address: str):
    user = await app.mongodb["users"].find_one({"email_address": email_address})
    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user                 



     #python -m venv um-env
 #.\tmu-env\Scripts\activate.bat
 #pip install --upgrade build
  